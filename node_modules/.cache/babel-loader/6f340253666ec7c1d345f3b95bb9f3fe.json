{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst useKeyPress = targetKey => {\n  _s();\n\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }; // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler); //window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\n_s(useKeyPress, \"vmDSD7h68k9Z7B48/eX82jyokKU=\");\n\nexport default useKeyPress;","map":{"version":3,"sources":["C:/Users/Steven/dbz-vs/src/useKeyPress.js"],"names":["React","useState","useEffect","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAAA;;AAE/B;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C,CAJ+B,CAQ/B;;AAEA,QAAMM,WAAW,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAa;AAE/B,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AAErBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AAED;AAEF,GARD,CAV+B,CAsB/B;;;AAEA,QAAMG,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AAE7B,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AAErBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AAED;AAEF,GARD,CAxB+B,CAoC/B;;;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC,EAFc,CAId;AAEA;;AAEA,WAAO,MAAM;AAEXG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;AAEAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AAED,KAND;AAQD,GAhBQ,EAgBN,EAhBM,CAAT,CAtC+B,CAsDvB;;AAIR,SAAOJ,UAAP;AAED,CA5DH;;GAAMF,W;;AA8DJ,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst useKeyPress = (targetKey) => {\r\n\r\n    // State for keeping track of whether key is pressed\r\n  \r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n  \r\n  \r\n  \r\n    // If pressed key is our target key then set to true\r\n  \r\n    const downHandler = ({ key }) => {\r\n  \r\n      if (key === targetKey) {\r\n  \r\n        setKeyPressed(true);\r\n  \r\n      }\r\n  \r\n    }\r\n  \r\n  \r\n  \r\n    // If released key is our target key then set to false\r\n  \r\n    const upHandler = ({ key }) => {\r\n  \r\n      if (key === targetKey) {\r\n  \r\n        setKeyPressed(false);\r\n  \r\n      }\r\n  \r\n    };\r\n  \r\n  \r\n  \r\n    // Add event listeners\r\n  \r\n    useEffect(() => {\r\n  \r\n      window.addEventListener('keydown', downHandler);\r\n  \r\n      //window.addEventListener('keyup', upHandler);\r\n  \r\n      // Remove event listeners on cleanup\r\n  \r\n      return () => {\r\n  \r\n        window.removeEventListener('keydown', downHandler);\r\n  \r\n        window.removeEventListener('keyup', upHandler);\r\n  \r\n      };\r\n  \r\n    }, []); // Empty array ensures that effect is only run on mount and unmount\r\n  \r\n  \r\n  \r\n    return keyPressed;\r\n  \r\n  }\r\n\r\n  export default useKeyPress;"]},"metadata":{},"sourceType":"module"}